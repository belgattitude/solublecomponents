<?php

namespace Soluble\Normalist\Driver;

use Zend\Db\Adapter\Adapter;
use Soluble\Normalist\Driver\Exception;
use Soluble\Db\Metadata\Source;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-18 at 17:36:04.
 */
class ZeroConfDriverTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ZeroConfDriver
     */
    protected $driver;

    /**
     *
     * @var Adapter
     */
    protected $adapter;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->adapter = \SolubleTestFactories::getDbAdapter();
        $this->driver = new ZeroConfDriver($this->adapter);
        $this->driver->clearMetadataCache();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testWithOptionalSchema()
    {
        
        $schema = $this->adapter->getCurrentSchema();
        $options = array('schema' => $schema); 
        $driver = new ZeroConfDriver($this->adapter, $options);
        $md = $driver->getMetadata();
        $driver->clearMetadataCache();
        unlink($driver->getModelsConfigFile());
        $md = $driver->getMetadata();
        
    }
    
    public function testSaveModelDefinition()
    {
        $schema = $this->adapter->getCurrentSchema();
        $options = array('schema' => $schema); 
        $driver = new ZeroConfDriver($this->adapter, $options);
        $md = $driver->getMetadata();        
        $file = $driver->getModelsConfigFile();
        //var_dump($file);
        
        $driver->clearMetadataCache();
        chmod($file, 0000);
        $catched = false;
        try {
            $driver->getMetadata();
        } catch (\Soluble\Normalist\Driver\Exception\ModelFileNotWritableException $e) {
            chmod($file, 0666);
            $catched = true;
            
        }
        $this->assertTrue($catched);
    }
    
    
    public function testConstructWithException()
    {
        $catched=false;
        try {
            $options = new \stdClass(); 
            $driver = new ZeroConfDriver($this->adapter, $options);
        } catch (Exception\InvalidArgumentException $e) {
            $catched=true;
        }
        $this->assertTrue($catched);
        
        $catched=false;
        try {
            $options = array('alias' => 1); 
            $driver = new ZeroConfDriver($this->adapter, $options);
        } catch (Exception\InvalidArgumentException $e) {
            $catched=true;
        }
        $this->assertTrue($catched);        
        
        $catched=false;
        try {
            $options = array('version' => array()); 
            $driver = new ZeroConfDriver($this->adapter, $options);
        } catch (Exception\InvalidArgumentException $e) {
            $catched=true;
        }
        $this->assertTrue($catched);        
        
        $catched=false;
        try {
            $options = array('path' => 1); 
            $driver = new ZeroConfDriver($this->adapter, $options);
        } catch (Exception\InvalidArgumentException $e) {
            $catched=true;
        }
        $this->assertTrue($catched);        
        
        
        $catched=false;
        try {
            $options = array('path' => '/usr/qdlkjfkjfkd'); 
            $driver = new ZeroConfDriver($this->adapter, $options);
        } catch (Exception\ModelPathNotFoundException $e) {
            $catched=true;
        }
        $this->assertTrue($catched);        
        
        $catched=false;
        try {
            $options = array('permissions' => array()); 
            $driver = new ZeroConfDriver($this->adapter, $options);
        } catch (Exception\InvalidArgumentException $e) {
            $catched=true;
        }
        $this->assertTrue($catched);        
        
        $catched=false;
        try {
            $options = array('schema' => array()); 
            $driver = new ZeroConfDriver($this->adapter, $options);
        } catch (Exception\InvalidArgumentException $e) {
            $catched=true;
        }
        $this->assertTrue($catched);        
        
    }
    
    

    public function testGetModelsConfigFile()
    {
        $md = $this->driver->getMetadata();
        $file = $this->driver->getModelsConfigFile();
        $this->assertTrue(file_exists($file));
        unlink($file);
        $this->assertFalse(file_exists($file));
        $this->driver->clearMetadataCache();
        $md = $this->driver->getMetadata();
        $file = $this->driver->getModelsConfigFile();
        $this->assertTrue(file_exists($file));
        
    }

    public function testGetModelsDefinition()
    {
        $this->driver->clearMetadataCache();
        $md = $this->driver->getMetadata();
        $file = $this->driver->getModelsConfigFile();
        $def = $this->driver->getModelsDefinition();
        $this->assertInternalType('array', $def);
        $this->assertTrue(file_exists($file));
        
        
        file_put_contents($file, 'invalid php code');
        $catched = false;
        try {
            $def = $this->driver->getModelsDefinition();
        } catch (Exception\ModelFileCorruptedException $e) {
            $catched = true;
        }
        $this->assertTrue($catched);
        
        
        // Second test
        unlink($file);
        $this->assertFalse(file_exists($file));
        $catched = false;
        try {
            $def = $this->driver->getModelsDefinition();
        } catch (Exception\ModelFileNotFoundException $e) {
            $catched = true;
        }
        $this->assertTrue($catched);
        $this->driver->clearMetadataCache();
        $this->driver->getMetadata();
        
        
        
        //
        
    }




    public function testGetDbAdapter()
    {
        $adapter = $this->driver->getDbAdapter();
        $this->assertEquals($adapter, $this->adapter);
    }

    public function testGetMetadata()
    {
        $md = $this->driver->getMetadata();
        //var_dump($md);
        //die();
    }

    public function testSetMetadata()
    {
        
        $md = new Source\Mysql\InformationSchema($this->adapter);
        $this->driver->clearMetadataCache();
        $this->driver->setMetadata($md);
        $md = $this->driver->getMetadata();
        
        
    }

}
