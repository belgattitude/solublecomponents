<?php

namespace Soluble\Normalist\Synthetic\ResultSet;


use Soluble\Normalist\Synthetic\Table;
use Soluble\Normalist\Synthetic\TableManager;
use Soluble\Normalist\Synthetic\Record;
use Soluble\Normalist\Synthetic\Exception;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-17 at 14:57:07.
 */
class ResultSetTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ResultSet
     */
    protected $resultSet;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $adapter = \SolubleTestFactories::getDbAdapter();
        //$cache   = \SolubleTestFactories::getCacheStorage();
       // $metadata = new Source\MysqlInformationSchema($adapter);
        /*
        $metadata = new Source\MysqlISMetadata($adapter);
        $metadata->setCache($cache);
*/
        //$this->tableManager = new TableManager($adapter);
        //
        //$this->tableManager->setMetadata($metadata);
        $this->tableManager = \SolubleTestFactories::getTableManager();
        

        $this->table = $this->tableManager->table('product_category');
        $select = $this->table->select();
        
        $this->resultSet = new ResultSet($select, $this->table);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    
    public function testExecuteIterable()
    {
        $rs = $this->table->search()->limit(1)->execute();
        $this->assertInstanceOf('Soluble\Normalist\Synthetic\ResultSet\ResultSet', $rs);
        
        foreach ($rs as $idx => $record) {
            $this->assertEquals(0, $idx);
            $this->assertInstanceOf('Soluble\Normalist\Synthetic\Record', $record);
        }
        //die('cool');
        //$arr = $rs->toArray();
        
        //var_dump($arr);
        //die();
    }
    

    public function testToArray()
    {
        $data = $this->resultSet->toArray();
        $this->assertInternalType('array', $data);
    }

    
    public function testToJson()
    {
        $results = $this->resultSet->toJson();
        $this->assertInternalType('string', $results);
        $decoded = json_decode($results, $assoc = true);
        $this->assertInternalType('array', $decoded);
    }
    
    public function testCurrentWithCompleteRecordDefinition()
    {
        $unitTable = $this->tableManager->table('product_unit');
        $select = $unitTable->select();
        $select->columns(array(
                    'unit_id',

                    'reference' => new \Zend\Db\Sql\Predicate\Expression('reference'),
                    'title',
                    'my_alias' => 'description',
                    'description',
                    'flag_active',
                    'icon_class',
                    'created_at',

                    'created_by',
                    'updated_by',
                
                
                    'updated_at',
                    'legacy_mapping',
                    'legacy_synchro_at'
                ));
        
        $resultSet = new ResultSet($select, $unitTable);
        $record = $resultSet->current();
        $this->assertInstanceOf('Soluble\Normalist\Synthetic\Record', $record);
    }
    
    
    public function testCurrentWithStarRecordDefinition()
    {
        $unitTable = $this->tableManager->table('product_unit');
        $select = $unitTable->select();
        $resultSet = new ResultSet($select, $unitTable);
        $record = $resultSet->current();
        $this->assertInstanceOf('Soluble\Normalist\Synthetic\Record', $record);
    }
    

    public function testCurrentIncompleteRecordDefinitionThrowsLogicException()
    {
        $this->setExpectedException('Soluble\Normalist\Synthetic\Exception\LogicException');
        $unitTable = $this->tableManager->table('product_unit');
        $select = $unitTable->select();
        $select->columns(array(
                    'unit_id',
                    'reference',
                ));
        
        $resultSet = new ResultSet($select, $unitTable);
        $record = $resultSet->current();
    }
    
    
    public function testCount()
    {
        $rs = $this->table->search()->limit(10)->execute();
        $this->assertInstanceOf('Soluble\Normalist\Synthetic\ResultSet\ResultSet', $rs);
        $count = $rs->count();
        
        $this->assertEquals(10, $count);

        // Ensure count let the pointer ok
        $i = 0;
        foreach ($rs as $record) {
            $i++;
        }
        $this->assertEquals(10, $i);
        
        $count = $rs->count();
        
        $this->assertEquals(10, $count);
        
        // Test countable interface
        $this->assertEquals(10, count($rs));
    }

    public function testBuffer()
    {
        $rs = $this->table->search()->limit(10)->execute();
        $this->assertInstanceOf('Soluble\Normalist\Synthetic\ResultSet\ResultSet', $rs);
        $rs->buffer();
        
        $count = $rs->count();
        
        $this->assertEquals(10, $count);

        // Ensure count let the pointer ok
        $i = 0;
        foreach ($rs as $record) {
            $i++;
        }
        $this->assertEquals(10, $i);
        
        $count = $rs->count();
        
        $this->assertEquals(10, $count);

        // Ensure results can be used
        $array = $rs->toArray();
        $this->assertEquals(10, count($array));
    }
}
