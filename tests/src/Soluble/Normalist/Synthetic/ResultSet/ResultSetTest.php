<?php

namespace Soluble\Normalist\Synthetic\ResultSet;

use Soluble\Db\Metadata\Source;
use Soluble\Normalist\Synthetic\Table;
use Soluble\Normalist\Synthetic\TableManager;
use Soluble\Normalist\Synthetic\Record;
use Soluble\Normalist\Synthetic\Exception;





/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-17 at 14:57:07.
 */
class ResultSetTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ResultSet
     */
    protected $resultSet;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $adapter = \SolubleTestFactories::getDbAdapter();
        $cache   = \SolubleTestFactories::getCacheStorage();
        $metadata = new Source\MysqlISMetadata($adapter);
        $metadata->setCache($cache);

        $this->tableManager = new TableManager($adapter);
        $this->tableManager->setMetadata($metadata);

        $this->table = $this->tableManager->table('product_category');
        $select = $this->table->select(); 
        
        $this->resultSet = new ResultSet($select, $this->table);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }
    
    public function testExecuteIterable()
    {
        $rs = $this->table->search()->limit(1)->execute();
        $this->assertInstanceOf('Soluble\Normalist\Synthetic\ResultSet\ResultSet', $rs);
        
        foreach ($rs as $idx => $record) {
            $this->assertEquals(0, $idx);
            $this->assertInstanceOf('Soluble\Normalist\Synthetic\Record', $record);
            
        }
        //die('cool');
        //$arr = $rs->toArray();
        
        //var_dump($arr);
        //die();
    }
    

    public function testToArray()
    {
        $data = $this->resultSet->toArray();
        $this->assertInternalType('array', $data);
    }

    
    public function testToJson()
    {
        $results = $this->resultSet->toJson();
        $this->assertInternalType('string', $results);
        $decoded = json_decode($results, $assoc=true);
        $this->assertInternalType('array', $decoded);
        
        
    }

    public function testCount()
    {
        
        $rs = $this->table->search()->limit(1)->execute();
        $this->assertInstanceOf('Soluble\Normalist\Synthetic\ResultSet\ResultSet', $rs);
        $count = $rs->count();
        $this->assertEquals(1, $count);
        
    }

}
