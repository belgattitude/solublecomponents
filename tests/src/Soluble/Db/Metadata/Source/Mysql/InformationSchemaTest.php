<?php

namespace Soluble\Db\Metadata\Source\Mysql;

use Zend\Db\Adapter\Adapter;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-04 at 16:46:00.
 */
class InformationSchemaTest extends \PHPUnit_Framework_TestCase
{
    
    /**
     *
     * @var Adapter
     */
    protected $adapter;

    /**
     * @var InformationSchema
     */
    protected $metadata;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->adapter = \SolubleTestFactories::getDbAdapter();
        $this->metadata = new InformationSchema($this->adapter);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }
    

    public function testGetSchemaConfigThrowsSchemaNotFoundException()
    {
        $this->setExpectedException('Soluble\Db\Metadata\Exception\SchemaNotFoundException');
        
        $metadata = new InformationSchema($this->adapter, $schema = "fdgdfgdfgppooaze");
        
        $metadata->getSchemaConfig();
        
        /*
        try {
         $metadata->getSchemaConfig();   
        } catch(\Exception $e) {
            echo "\n";
            echo $e->getTraceAsString();
            echo $e->getMessage();
            echo "\n";
            die('cool');
        }*/
        
    }
    
    
    public function testConstructThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\Db\Metadata\Exception\InvalidArgumentException');
        
        $metadata = new InformationSchema($this->adapter, array('schema_not_valid'));
    }

    public function testConstructThrowsInvalidArgumentException2()
    {
        $this->setExpectedException('Soluble\Db\Metadata\Exception\InvalidArgumentException');
        $adapter = \SolubleTestFactories::getDbAdapter();
        $metadata = new InformationSchema($this->adapter, $schema = "   ");
    }
    
    
    

    public function testGetSchemaConfig()
    {
        $schema = $this->metadata->getSchemaConfig();
        $this->assertInternalType('array', $schema);
        $this->assertInternalType('array', $schema['tables']);
        $this->assertTrue(array_key_exists('product', $schema['tables']));
    }
    
    public function testGetTableConfigThrowsTableNotFoundException()
    {
        
        $this->setExpectedException('Soluble\Db\Metadata\Exception\TableNotFoundException');
        $config = $this->metadata->getTableConfig('table_unexistent_999');
   
    }
    
    public function testGetTableConfig()
    {
        $table = "product_brand";
        
        $config = $this->metadata->getTableConfig($table);
        //$writer = new \Zend\Config\Writer\PhpArray();
        //$string = $writer->toString($config);
        $this->assertInternalType('array', $config);
        $this->assertEquals('product_brand', $config['name']);
       
        $this->assertEquals('reference', $config['unique_keys']['unique_reference_idx'][0]);
        $this->assertEquals('brand_id', $config['primary_keys'][0]);
        $this->assertEquals(false, $config['columns']['created_by']['primary']);
        $this->assertEquals(true, $config['columns']['brand_id']['primary']);


    }
    
    public function testGetRelations()
    {
        $relations = $this->metadata->getRelations('product');
        $this->assertInternalType('array', $relations);
        $this->assertArrayHasKey('brand_id', $relations);
        $this->assertArrayHasKey('referenced_column', $relations['unit_id']);
        $this->assertArrayHasKey('referenced_table', $relations['unit_id']);
        $this->assertArrayHasKey('constraint_name', $relations['unit_id']);
    }

    
    
    

    
    public function testGetTablesInformation()
    {
        $ti = $this->metadata->getTablesInformation();
        $table = 'media';
        $this->assertInternalType('array', $ti);
        $this->assertArrayHasKey($table, $ti);
        $this->assertArrayHasKey('columns', $ti[$table]);
        $this->assertArrayHasKey('indexes', $ti[$table]);
        $this->assertArrayHasKey('primary_keys', $ti[$table]);
        $this->assertArrayHasKey('unique_keys', $ti[$table]);
        
        
    }
    
    public function testGetUniqueKeys()
    {
        $unique = $this->metadata->getUniqueKeys('test_table_with_unique_key');
        
        $this->assertInternalType('array', $unique);
        $this->assertEquals(1, count($unique));
        $this->assertArrayHasKey('unique_id_1', $unique);
        $this->assertInternalType('array', $unique['unique_id_1']);
        $this->assertEquals(2, count($unique['unique_id_1']));
        $this->assertEquals(array('unique_id_1', 'unique_id_2'), $unique['unique_id_1']);
        
        
        $unique = $this->metadata->getUniqueKeys('product');
        $this->assertInternalType('array', $unique);
        $this->assertEquals(3, count($unique));
        $this->assertArrayHasKey('unique_legacy_mapping_idx', $unique);
        $this->assertArrayHasKey('unique_reference_idx', $unique);
        $this->assertArrayHasKey('unique_slug_idx', $unique);
        
        
    }
    
    
    public function testGetPrimaryKey()
    {
        $primary = $this->metadata->getPrimaryKey('user');
        $this->assertInternalType('string', $primary);
        $this->assertEquals('user_id', $primary);
    }
    
          
    
    public function testGetPrimaryKeyThrowsTableNotFoundException()
    {
        $this->setExpectedException('Soluble\Db\Metadata\Exception\TableNotFoundException');
        $primary = $this->metadata->getPrimaryKey('table_not_found_899');
    }
      
    public function testGetPrimaryKeyThrowsMultiplePrimaryKeyException()
    {
        $this->setExpectedException('Soluble\Db\Metadata\Exception\MultiplePrimaryKeyException');
        $primary = $this->metadata->getPrimaryKey('test_table_with_multipk');
    }
    
    public function testGetColumns()
    {
        $columns = $this->metadata->getColumns('user');
        $this->assertEquals('user_id', $columns[0]);
        $this->assertEquals('password', $columns[4]);
        
    }
    
    public function testGetTableInformation()
    {
        $info = $this->metadata->getTableInformation('user');
        $this->assertEquals('user', $info['name']);
        $this->assertEquals('user_id', $info['primary_keys'][0]);
    }

    public function testHasTable()
    {
        $this->assertTrue($this->metadata->hasTable('user'));
        $this->assertFalse($this->metadata->hasTable('user_not_exists_888'));
    }
    
    
    public function testInnoDbStat()
    {
        
        
        $adapter = $this->adapter;
        $this->metadata->clearCacheInformation();
        $sql = "show global variables like 'innodb_stats_on_metadata'";
        $results = $adapter->query($sql, Adapter::QUERY_MODE_EXECUTE);
        $row = $results->current();
        $status = strtoupper($row['Value']);
        if ($status == 'OFF') {
            // Let's make it ON
            $adapter->query("set global innodb_stats_on_metadata='ON'", Adapter::QUERY_MODE_EXECUTE);
            $results = $adapter->query($sql, Adapter::QUERY_MODE_EXECUTE);
            //$row = $results->current();
            //var_dump($row);
            
            
            $this->metadata->getPrimaryKey('user');
            $adapter->query("set global innodb_stats_on_metadata='OFF'", Adapter::QUERY_MODE_EXECUTE);
            
        }
    }
     

    public function testGetPrimaryKeyThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\Db\Metadata\Exception\InvalidArgumentException');
        $primary = $this->metadata->getPrimaryKey(array('cool'));
        
    }
    

    public function testGetPrimaryKeysThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\Db\Metadata\Exception\InvalidArgumentException');
        $primary = $this->metadata->getPrimaryKeys(array('cool'));
        
    }
    
    
    public function testGetPrimaryKeyThrowsNoPrimaryKeyException()
    {
        $this->setExpectedException('Soluble\Db\Metadata\Exception\NoPrimaryKeyException');
        $primary = $this->metadata->getPrimaryKey('test_table_without_pk');
    }
    
    public function testGetPrimaryKeys()
    {
        $keys = $this->metadata->getPrimaryKeys('user');
        $this->assertInternalType('array', $keys);
        $this->assertEquals('user_id', $keys[0]);

    }

    
    public function testGetPrimaryKeysThrowsNoPrimaryKeyException()
    {
        $this->setExpectedException('Soluble\Db\Metadata\Exception\NoPrimaryKeyException');
        $primary = $this->metadata->getPrimaryKeys('test_table_without_pk');
    }
}
