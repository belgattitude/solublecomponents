<?php

namespace Soluble\Db\Sql;

use Soluble\Db\Metadata\Source;
use Zend\Db\Adapter\Adapter;
use Zend\Db\Sql\Predicate\Expression;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-27 at 13:12:43.
 */
class SelectTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Select
     */
    protected $select;

    /**
     *
     * @var \Zend\Db\Adapter\Adapter
     */
    protected $adapter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->adapter = \SolubleTestFactories::getDbAdapter();
        $this->select = new Select();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }
    
    

    public function testPrefixedColumns()
    {
        $s = $this->select->setDbAdapter($this->adapter);
        $s->from('user');
        $fluent = $s->prefixedColumns(array(
            'pc.test2',
            'pb18.test',
            'pc.pb.a',
            'aliased_col1' => new Expression('count(*)'),
            'aliased_col2' => 'pc.col2',
            'aliased_col3' => 'pc.col3',
            
        ));
        $this->assertInstanceOf('Soluble\Db\Sql\Select', $fluent);
        $sql =  $s->getSql();
        
        $expected = <<<EOF
            SELECT `pc`.`test2` AS `test2`, `pb18`.`test` AS `test`, `pc`.`pb`.`a` AS `a`, count(*) AS `aliased_col1`, `pc`.`col2` AS `aliased_col2`, `pc`.`col3` AS `aliased_col3` FROM `user`
EOF;
        
        $this->assertEquals(trim($expected), trim($sql));
        
        
    }

    public function testPrefixedColumnsThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\Db\Sql\Exception\InvalidArgumentException');
        $s = $this->select->setDbAdapter($this->adapter);
        $s->from('user');
        $s->prefixedColumns(array(
            'pc.test',
            'pb18.test',
        ));
    }

    public function testPrefixedColumnsThrowsInvalidArgumentException3()
    {
        $this->setExpectedException('Soluble\Db\Sql\Exception\InvalidArgumentException');
        $s = $this->select->setDbAdapter($this->adapter);
        $s->from('user');
        $s->prefixedColumns(array(
            '*'
            
        ));
    }
    

    public function testPrefixedColumnsThrowsInvalidArgumentException4()
    {
        $this->setExpectedException('Soluble\Db\Sql\Exception\InvalidArgumentException');
        $s = $this->select->setDbAdapter($this->adapter);
        $s->from('user');
        $s->prefixedColumns(array(
            'u.*'
            
        ));
    }

    public function testPrefixedColumnsThrowsInvalidArgumentException5()
    {
        $this->setExpectedException('Soluble\Db\Sql\Exception\InvalidArgumentException');
        $s = $this->select->setDbAdapter($this->adapter);
        $s->from('user');
        $s->prefixedColumns(array(
            'test' => 'u.*'
            
        ));
    }
    
    public function testPrefixedColumnsThrowsInvalidArgumentException6()
    {
        $this->setExpectedException('Soluble\Db\Sql\Exception\InvalidArgumentException');
        $s = $this->select->setDbAdapter($this->adapter);
        $s->from('user');
        $s->prefixedColumns(array(
            
            'test',
            'test' => new Expression('count(*)'),
            
        ));
    }
    

    public function testPrefixedColumnsThrowsInvalidArgumentException7()
    {
        $this->setExpectedException('Soluble\Db\Sql\Exception\InvalidArgumentException');
        $s = $this->select->setDbAdapter($this->adapter);
        $s->from('user');
        $s->prefixedColumns(array(
            
            'test' => new Expression('count(*)'),
            'test'
            
        ));
    }
    
    
    public function testPrefixedColumnsThrowsInvalidArgumentException10()
    {
        $this->setExpectedException('Soluble\Db\Sql\Exception\InvalidArgumentException');
        $s = $this->select->setDbAdapter($this->adapter);
        $s->from('user');
        $s->prefixedColumns(array(
            'id' => 'pc18.id',
            'pc.id',
        ));
    }

    
    public function testGetSql()
    {
        $this->select->setDbAdapter($this->adapter)->from('user');
        $sql = $this->select->getSql();
        $this->assertInternalType('string', $sql);
    }

    public function testToString()
    {
        $this->select->setDbAdapter($this->adapter)->from('user');
        $sql = $this->select->__toString();
        $this->assertInternalType('string', $sql);
    }
    
    public function testGetSqlThrowsInvalidUsageException()
    {
        $this->setExpectedException('Soluble\Db\Sql\Exception\InvalidUsageException');
        $this->select->from('user');
        $sql = $this->select->getSql();
        
    }

    public function testToStringThrowsInvalidUsageException()
    {
        $this->setExpectedException('Soluble\Db\Sql\Exception\InvalidUsageException');
        $this->select->from('user')->__toString();
        
        
    }
    

    public function testSetDbAdapter()
    {
        $s = $this->select->setDbAdapter($this->adapter);
        $this->assertInstanceOf('Soluble\Db\Sql\Select', $s);
    }

    public function testExecuteThrowsInvalidUsageException()
    {
        $this->setExpectedException('Soluble\Db\Sql\Exception\InvalidUsageException');
        $this->select->execute();
    }
}
