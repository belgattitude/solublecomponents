<?php

namespace Soluble\FlexStore\Writer;

use Soluble\FlexStore\Source\Zend\SelectSource;
use DateTime;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-10-16 at 15:18:12.
 */
class SimpleXmlWriterTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Xml
     */
    protected $xmlWriter;

    /**
     * @var SelectSource
     */
    protected $source;

    /**
     *
     * @var \Zend\Db\Adapter\Adapter
     */
    protected $adapter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->adapter = \SolubleTestFactories::getDbAdapter();
        $select = new \Zend\Db\Sql\Select();
        $select->from('product_brand');
        $params = array(
            'adapter' => $this->adapter,
            'select' => $select
        );

        $this->source = new SelectSource($params);


        $this->xmlWriter = new SimpleXmlWriter();
        $this->xmlWriter->setSource($this->source);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Soluble\FlexStore\Writer\SimpleXmlWriter::getData
     */
    public function testGetData()
    {
        $this->xmlWriter->setRowTag('row');

        $data = $this->xmlWriter->getData();
        $this->assertInternalType('string', $data);
        $xml = new \SimpleXMLElement($data);

        $this->assertTrue(is_numeric((string) $xml->total));
        $this->assertTrue(is_numeric((string) $xml->success));
        
        
        $timestamp = DateTime::createFromFormat(DateTime::W3C, (string) $xml->timestamp);
        
        $this->assertEquals($timestamp->format(DateTime::W3C), (string) $xml->timestamp);
        
        
        $this->assertNotEmpty($xml->data->row[0]->reference);
    }

    /**
     * @covers Soluble\FlexStore\Writer\SimpleXmlWriter::getData
     */
    public function testGetDataWithOptions()
    {
        $this->xmlWriter->setOptions(
                array(
                    'row_tag' => 'line',
                    'body_tag' => 'result'
                    )
                );

        $data = $this->xmlWriter->getData();
        $this->assertInternalType('string', $data);

        $xml = new \SimpleXMLElement($data);

        $this->assertTrue(is_numeric((string) $xml->total));
        $this->assertTrue(is_numeric((string) $xml->success));
        $this->assertNotEmpty($xml->data->line[0]->reference);
    }

    /**
     * @covers Soluble\FlexStore\Writer\SimpleXmlWriter::getOptions
     */
    public function testGetDataWithOptionsThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\FlexStore\Exception\InvalidArgumentException');
        $this->xmlWriter->setOptions(
                array(
                    'rossssss' => 'line',
                    'body_tag' => 'result'
                    )
                );


        $data = $this->xmlWriter->getData();
    }


    /**
     * @covers Soluble\FlexStore\Writer\SimpleXmlWriter::send
     * @todo   Implement testSend().
     */
    public function testSend()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
