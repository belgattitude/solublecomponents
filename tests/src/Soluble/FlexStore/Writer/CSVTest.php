<?php

namespace Soluble\FlexStore\Writer;

use Soluble\FlexStore\Source\Zend\SelectSource;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-10-16 at 15:18:12.
 */
class CSVTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var CSV
     */
    protected $csvWriter;

    /**
     * @var SelectSource
     */
    protected $source;

    /**
     *
     * @var \Zend\Db\Adapter\Adapter
     */
    protected $adapter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->adapter = \SolubleTestFactories::getDbAdapter();
        $select = new \Zend\Db\Sql\Select();
        $select->from('product_category_translation')->where("lang = 'fr'")->limit(50);
        $params = array(
            'adapter' => $this->adapter,
            'select' => $select
        );

        $this->source = new SelectSource($params);


        $this->csvWriter = new CSV();
        $this->csvWriter->setSource($this->source);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testGetEmptyData()
    {
        $enclosure = '"';
        $this->csvWriter->setOptions(
                array(
                    'field_separator' => CSV::SEPARATOR_TAB,
                    'line_separator' => CSV::SEPARATOR_NEWLINE_UNIX,
                    'enclosure' => $enclosure,
                    'charset' => 'UTF-8'
                    )
                );
        
        
        $options = new \Soluble\FlexStore\Options();
        $options->setLimit(0);
        $data = $this->csvWriter->getData($options);
        $this->assertInternalType('string', $data);
        
        $data = explode(CSV::SEPARATOR_NEWLINE_UNIX, $data);
        $header = str_getcsv($data[0], CSV::SEPARATOR_TAB, $enclosure, $escape=null);
        $columns = array_keys((array) $this->source->getColumnModel()->getColumns());
        $this->assertEquals($columns, $header);
    }        
    
    public function testGetData()
    {
        $data = $this->csvWriter->getData();
        $this->assertInternalType('string', $data);
    }
    


    public function testGetDataLatin1Charset()
    {
        
        $enclosure = '"';
        $this->csvWriter->setOptions(
                array(
                    'field_separator' => CSV::SEPARATOR_TAB,
                    'line_separator' => CSV::SEPARATOR_NEWLINE_UNIX,
                    'enclosure' => $enclosure,
                    'charset' => 'ISO-8859-1'
                    )
                );

        $data = $this->csvWriter->getData();
        $this->assertInternalType('string', $data);
        $data = explode(CSV::SEPARATOR_NEWLINE_UNIX, $data);
        $line0 = str_getcsv($data[0], CSV::SEPARATOR_TAB, $enclosure, $escape=null);
        $this->assertInternalType('array', $line0);
        $this->assertEquals($line0[1], 'category_id');

        $select = new \Zend\Db\Sql\Select();
        $select->from('product_category_translation')->where("lang = 'fr' and category_id = 988")->limit(50);
        $params = array(
            'adapter' => $this->adapter,
            'select' => $select
        );


        $this->csvWriter->setSource(new SelectSource($params));
        $data = $this->csvWriter->getData();
        $data = explode(CSV::SEPARATOR_NEWLINE_UNIX, $data);
        $line1 = str_getcsv($data[1], CSV::SEPARATOR_TAB, $enclosure, $escape=null);
        $this->assertInternalType('array', $line1);
        $title = $line1[4];
        
        $header = str_getcsv($data[0], CSV::SEPARATOR_TAB, $enclosure, $escape=null);
        $columns = array_keys((array) $this->source->getColumnModel()->getColumns());
        $this->assertEquals($columns, $header);
        

        $this->assertTrue(mb_check_encoding($title, 'ISO-8859-1'));
        $this->assertFalse(mb_check_encoding($title, 'UTF-8'));
        $this->assertFalse(mb_check_encoding($title, 'ASCII'));
        $this->assertEquals(utf8_decode('ModÃ¨les Electriques'), $title);
        
        $headers = $this->csvWriter->getHttpHeaders();
        $this->assertInstanceOf("Soluble\FlexStore\Writer\Http\SimpleHeaders", $headers);
        $this->assertEquals('text/csv', $headers->getContentType());
        $this->assertEquals('ISO-8859-1', strtoupper($headers->getCharset()));        
    }

    /**
     * @covers Soluble\FlexStore\Writer\CSV::getData
     */
    public function testGetDataUTF8Charset()
    {
        //die();
        $enclosure = '"';
        $this->csvWriter->setOptions(
                array(
                    'field_separator' => CSV::SEPARATOR_TAB,
                    'line_separator' => CSV::SEPARATOR_NEWLINE_UNIX,
                    'enclosure' => $enclosure,
                    //'charset' => 'ISO-8859-1'
                    )
                );

        $data = $this->csvWriter->getData();
        $this->assertInternalType('string', $data);
        $data = explode(CSV::SEPARATOR_NEWLINE_UNIX, $data);
        $line0 = str_getcsv($data[0], CSV::SEPARATOR_TAB, $enclosure, $escape=null);
        $this->assertInternalType('array', $line0);
        $this->assertEquals($line0[1], 'category_id');

        $select = new \Zend\Db\Sql\Select();
        $select->from('product_category_translation')->where("lang = 'fr' and category_id = 988")->limit(50);
        $params = array(
            'adapter' => $this->adapter,
            'select' => $select
        );


        $this->csvWriter->setSource(new SelectSource($params));
        $data = $this->csvWriter->getData();
        
        $data = explode(CSV::SEPARATOR_NEWLINE_UNIX, $data);
        $line1 = str_getcsv($data[1], CSV::SEPARATOR_TAB, $enclosure, $escape=null);
        $this->assertInternalType('array', $line1);
        $title = $line1[4];

        $this->assertTrue(mb_check_encoding($title, 'UTF-8'));
        $this->assertFalse(mb_check_encoding($title, 'ASCII'));
        $this->assertNotEquals(utf8_decode($title), $title);
        $this->assertEquals('ModÃ¨les Electriques', $title);
        
        
        $headers = $this->csvWriter->getHttpHeaders();
        $this->assertInstanceOf("Soluble\FlexStore\Writer\Http\SimpleHeaders", $headers);
        $this->assertEquals('text/csv', $headers->getContentType());
        $this->assertEquals('UTF-8', strtoupper($headers->getCharset()));        
    }


    /**
     * @covers Soluble\FlexStore\Writer\CSV::getOptions
     */
    public function testGetDataWithOptionsThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\FlexStore\Exception\InvalidArgumentException');
        $this->csvWriter->setOptions(
                array(
                    'rossssss' => 'line',
                    )
                );


        $data = $this->csvWriter->getData();
    }



    public function testGetDataEscapeDelimiter()
    {
        $enclosure = '"';
        $this->csvWriter->setOptions(
                array(
                    'field_separator' => CSV::SEPARATOR_SEMICOLON,
                    'line_separator' => CSV::SEPARATOR_NEWLINE_UNIX,
                    'enclosure' => $enclosure,
                    'charset' => 'ISO-8859-1',
                    'escape' => '\\'
                    )
                );


        $select = new \Zend\Db\Sql\Select();
        $select->from(array('pc18' => 'product_category_translation'))
               ->columns(array(
                   'category_id',
                   'test' => new \Zend\Db\Sql\Expression("'alpha; beta;'")
               ))
               ->where("lang = 'fr' and category_id = 988");
        $params = array(
            'adapter' => $this->adapter,
            'select' => $select
        );


        $this->csvWriter->setSource(new SelectSource($params));
        $data = $this->csvWriter->getData();
        $this->assertContains('alpha\; beta\;', $data);

    }

    public function testGetDataEnclosureDelimiterWithoutEscape()
    {
        $enclosure = '"';
        $this->csvWriter->setOptions(
                array(
                    'field_separator' => CSV::SEPARATOR_SEMICOLON,
                    'line_separator' => CSV::SEPARATOR_NEWLINE_UNIX,
                    'enclosure' => $enclosure,
                    'charset' => 'ISO-8859-1',
                    'escape' => ''
                    )
                );


        $select = new \Zend\Db\Sql\Select();
        $select->from(array('pc18' => 'product_category_translation'))
               ->columns(array(
                   'category_id',
                   'test' => new \Zend\Db\Sql\Expression("'alpha; beta;'")
               ))
               ->where("lang = 'fr' and category_id = 988");
        $params = array(
            'adapter' => $this->adapter,
            'select' => $select
        );


        $this->csvWriter->setSource(new SelectSource($params));
        $data = $this->csvWriter->getData();

        $this->assertContains('"alpha; beta;"', $data);

    }
    
    
    public function testGetHTTPHeaders()
    {
        $headers = $this->csvWriter->getHttpHeaders();
        $this->assertInstanceOf("Soluble\FlexStore\Writer\Http\SimpleHeaders", $headers);
        $this->assertEquals('text/csv', $headers->getContentType());
        $this->assertEquals('UTF-8', strtoupper($headers->getCharset()));
        
        
    }
    

}
