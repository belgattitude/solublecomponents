<?php

namespace Soluble\FlexStore\Source\Zend;
use Soluble\FlexStore\Options;
use Zend\Db\Sql\Select;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-10-14 at 12:05:43.
 */
class SelectSourceTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var SelectSource
     */
    protected $source;


    /**
     *
     * @var \Zend\Db\Adapter\Adapter
     */
    protected $adapter;


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->adapter = \SolubleTestFactories::getDbAdapter();
        $select = new \Zend\Db\Sql\Select();
        $select->from('user');
        $params = array(
                'adapter' => $this->adapter,
                'select'  => $select
            );

        $this->source = new SelectSource($params);

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testConstructThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\FlexStore\Exception\InvalidArgumentException');
        $source = new SelectSource('cool');        
    }

    public function testConstructThrowsMissingArgumentException()
    {
        $this->setExpectedException('Soluble\FlexStore\Exception\MissingArgumentException');
        $source = new SelectSource(array());        
    }

    public function testConstructThrowsMissingArgumentException2()
    {
        $this->setExpectedException('Soluble\FlexStore\Exception\MissingArgumentException');
        $source = new SelectSource(array('select' => new Select()));        
    }    
    
    public function testConstructThrowsInvalidArgumentException3()
    {
        $this->setExpectedException('Soluble\FlexStore\Exception\InvalidArgumentException');
        $source = new SelectSource(array('select' => 'cool'));        
    }
    
    public function testConstructThrowsInvalidArgumentException4()
    {
        $this->setExpectedException('Soluble\FlexStore\Exception\InvalidArgumentException');
        $source = new SelectSource(array('select' => new Select(), 'adapter' => 'cool'));        
    }
    
    
    
    public function testSetColumns()
    {
        $columns = array('email', 'user_id');
        $this->source->setColumns($columns);
        $data = $this->source->getData();
        $this->isInstanceOf('Soluble\FlexStore\ResultSet\ResultSet');

        $d = $data->toArray();
        $first = array_keys($d[0]);

        $this->assertEquals(array_shift($columns), array_shift($first));
        $this->assertEquals(array_shift($columns), array_shift($first));
    }

    /**
     * @covers Soluble\FlexStore\Source\Zend\SelectSource::getData
     * @covers Soluble\FlexStore\Source\AbstractSource::setColumns
     */
    public function testSetColumnsThrowsInvalidColumnsException()
    {
        $columns = array('email', 'ur_id');
        $this->setExpectedException('Soluble\FlexStore\ResultSet\Exception\UnknownColumnException');
        $this->source->setColumns($columns);
        $data = $this->source->getData();
        $d = $data->toArray();
    }

    public function testGetData()
    {
        $source1 = $this->getNewSource();
        $source2 = $this->getNewSource();
        
        $data = $source1->getData();
        $this->isInstanceOf('Soluble\FlexStore\ResultSet\ResultSet');
        $d = $data->toArray();
        $this->assertInternalType('array', $d);
        $this->assertArrayHasKey('user_id', $d[0]);
        $this->assertArrayHasKey('email', $d[0]);

        
        
        $options = new Options();
        $options->setLimit(10);
        $options->setOffset(0);
        
        $data2 = $source2->getData($options);
        $d2 = $data2->toArray();
        
        $this->assertInternalType('array', $d2);
        
        $this->assertArrayHasKey('user_id', $d2[0]);
        $this->assertArrayHasKey('email', $d2[0]);
        $this->assertEquals($d[0], $d2[0]);

    }
    
    public function testGetDataThrowsEmptyQueryException()
    {

        $this->setExpectedException('Soluble\FlexStore\Exception\EmptyQueryException');
        $source = new SelectSource(array('select' => new Select(), 'adapter' => $this->adapter));        
        $data = $source->getData();
    }
    
    public function testGetQueryString()
    {
        $data = $this->source->getData();
        $sql_string = $this->source->getQueryString();
        $this->assertInternalType('string', $sql_string);
        $this->assertRegExp('/^select/', strtolower(trim($sql_string)));
    }


    public function testGetQueryStringThrowsInvalidUsageException()
    {
        $this->setExpectedException('Soluble\FlexStore\Exception\InvalidUsageException');
        $sql_string = $this->source->getQueryString();
        $this->assertInternalType('string', $sql_string);
        $this->assertRegExp('/^select/', strtolower(trim($sql_string)));
    }

    
    /**
     * 
     * @return \Soluble\FlexStore\Source\Zend\SelectSource
     */
    protected function getNewSource()
    {
        $select = new \Zend\Db\Sql\Select();
        $select->from('user');
        $params = array(
                'adapter' => $this->adapter,
                'select'  => $select
            );

        return new SelectSource($params);
        
    }

}
