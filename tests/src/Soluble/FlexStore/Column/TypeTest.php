<?php

namespace Soluble\FlexStore\Column;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-03 at 11:32:13.
 */
class TypeTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Type
     */
    protected $type;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->type = new Type;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testCreate()
    {
        $this->assertEquals(Type::TYPE_STRING, Type::createType(Type::TYPE_STRING)->getName());
        $this->assertEquals(Type::TYPE_INTEGER, Type::createType(Type::TYPE_INTEGER)->getName());
        $this->assertEquals(Type::TYPE_BIT, Type::createType(Type::TYPE_BIT)->getName());
        $this->assertEquals(Type::TYPE_BLOB, Type::createType(Type::TYPE_BLOB)->getName());
        $this->assertEquals(Type::TYPE_BOOLEAN, Type::createType(Type::TYPE_BOOLEAN)->getName());
        $this->assertEquals(Type::TYPE_DATE, Type::createType(Type::TYPE_DATE)->getName());
        $this->assertEquals(Type::TYPE_DATETIME, Type::createType(Type::TYPE_DATETIME)->getName());
        $this->assertEquals(Type::TYPE_DECIMAL, Type::createType(Type::TYPE_DECIMAL)->getName());
        $this->assertEquals(Type::TYPE_TIME, Type::createType(Type::TYPE_TIME)->getName());
        
    }
    
    public function testCreateThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\FlexStore\Column\Exception\InvalidArgumentException');
        Type::createType('not_a_valid_type_name');
    }
    
    public function testAll()
    {
        $supported = Type::getSupported();
        foreach($supported as $type_name) {
            $type = Type::createType($type_name);
            $this->assertInstanceOf('Soluble\FlexStore\Column\Type\AbstractType', $type);
            $this->assertEquals($type_name, $type->getName());
        }
    }


    public function testIsSupported()
    {
        $this->assertTrue(Type::isSupported(Type::TYPE_BIT));
        $this->assertFalse(Type::isSupported('cool'));
        
    }

}
