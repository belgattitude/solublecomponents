<?php

namespace Soluble\FlexStore\Column;

use Soluble\FlexStore\Source\Zend\SqlSource;
use Zend\Db\Sql\Select;
use Zend\Db\Sql\Expression;

use Soluble\FlexStore\Formatter\CurrencyFormatter;
use Soluble\FlexStore\Store;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-10 at 15:15:20.
 */
class ColumnModelTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var SqlSource
     */
    protected $source;

    /**
     *
     * @var \Zend\Db\Adapter\Adapter
     */
    protected $adapter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

        $this->adapter = \SolubleTestFactories::getDbAdapter();
        $select = new \Zend\Db\Sql\Select();
        $select->from('user');


        
        $this->source = new SqlSource($this->adapter, $select);

        $this->columnModel = $this->source->getColumnModel();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }
    
    public function testSetFormatter()
    {

        $source = new SqlSource($this->adapter);
        $select = $source->select();
        $select->from(array('p' => 'product'), array())
                ->join(array('ppl' => 'product_pricelist'), new Expression('ppl.product_id = p.product_id and ppl.pricelist_id = 1'), array(), $select::JOIN_LEFT);

        $select->columns(array(
            'product_id' => new Expression('p.product_id'),
            'reference' => new Expression('p.reference'),
            'price' => new Expression('ppl.price'),
            'list_price' => new Expression('ppl.list_price'),
            'public_price' => new Expression('ppl.public_price'),
            'currency_reference' => new Expression("'CNY'")
        ));

        $store = new Store($source);        
        $cm = $store->getColumnModel();

        $formatter = new CurrencyFormatter();
        $formatter->setLocale('fr_FR');
        $formatter->setCurrencyCode('EUR');
        $cm->get('price')->setFormatter($formatter);
        $data = $store->getData()->toArray();
        $this->assertEquals('10,20 €', $data[0]['price']);
        // Null will be transformed in 0,00 €
        $this->assertEquals('0,00 €', $data[3]['price']);

        $formatter->setLocale('en_US');
        $formatter->setCurrencyCode('USD');
        $cm->get('price')->setFormatter($formatter);
        $data = $store->getData()->toArray();
        $this->assertEquals('$10.20', $data[0]['price']);
        // Null will be transformed in 0,00 €
        $this->assertEquals('$0.00', $data[3]['price']);

        
    }
    

    public function testAddRowRenderer()
    {
        $select = new Select();
        $select->from(array('p' => 'product'), array())
                ->join(array('ppl' => 'product_pricelist'), new Expression('ppl.product_id = p.product_id and ppl.pricelist_id = 1'), array(), $select::JOIN_LEFT);

        $select->columns(array(
            'product_id' => new Expression('p.product_id'),
            'reference' => new Expression('p.reference'),
            'price' => new Expression('ppl.price'),
            'list_price' => new Expression('ppl.list_price'),
            'public_price' => new Expression('ppl.public_price')
        ));

        $source = new SqlSource($this->adapter, $select);
        $cm = $source->getColumnModel();

        /*
          $cm->setRenderer(array('column', 'column2'), $my_renderer);
          $cm->setRenderer('column3', $my_renderer2);

          $renderer->apply($column, $data) {
          $data
          } */

        $fct = function(\ArrayObject $row) {
            $row['price'] = 200;
        };

        $fct2 = function(\ArrayObject $row) {
            if ($row['product_id'] == 113) {
                $row['reference'] = 'MyNEWREF';
            }
        };


        // $resultset = $source->getData();
        //$resultset->setHydratedColumns($columns);
        //$resultset

        $cm->addRowRenderer($fct);
        $cm->addRowRenderer($fct2);

        $data = $source->getData()->toArray();
        foreach ($data as $row) {
            $this->assertEquals(200, $row['price']);
            if ($row['product_id'] == 113) {
                $this->assertEquals('MyNEWREF', $row['reference']);
            } else {
                $this->assertNotEquals('MyNEWREF', $row['reference']);
            }
        }
        //die();
    }

    public function testGetColumns()
    {
        $columnModel = $this->columnModel;
        $this->assertInstanceOf('\Soluble\FlexStore\Column\ColumnModel', $columnModel);
        $columns = $columnModel->getColumns();
        $this->assertInstanceOf('ArrayObject', $columns);
        foreach ($columns as $key => $column) {
            $this->assertInstanceOf('Soluble\FlexStore\Column\Column', $column);
            $this->assertEquals($key, $column->getName());
        }
    }

    public function testExclusion()
    {
        $select = new \Zend\Db\Sql\Select();
        $select->from('product');
        $source = new SqlSource($this->adapter, $select);
        $cm = $source->getColumnModel();

        $excluded = array('product_id', 'legacy_mapping');
        $cm->exclude($excluded);
        $this->assertEquals($excluded, $cm->getExcluded());
    }

    public function testSortColumns()
    {
        $select = new \Zend\Db\Sql\Select();
        $select->from('user')->columns(array('user_id', 'password', 'email', 'username'));
        $source = new SqlSource($this->adapter, $select);
        $cm = $source->getColumnModel();

        $sort = array('email', 'user_id');
        $cm->sort($sort);

        $this->assertEquals(array('email', 'user_id', 'password', 'username'), array_keys((array) $cm->getColumns()));
    }

    public function testSortColumnsThrowsDuplicateColumnException()
    {
        $this->setExpectedException('Soluble\FlexStore\Column\Exception\DuplicateColumnException');
        $select = new \Zend\Db\Sql\Select();
        $select->from('user')->columns(array('user_id', 'password', 'email', 'username'));
        $source = new SqlSource($this->adapter, $select);
        $cm = $source->getColumnModel();

        $sort = array('email', 'user_id', 'email', 'user_id');

        $cm->sort($sort);
    }

    public function testGetColumn()
    {
        $select = new \Zend\Db\Sql\Select();
        $select->from('user')->columns(array('user_id', 'password', 'email', 'username'));
        $source = new SqlSource($this->adapter, $select);
        $cm = $source->getColumnModel();
        $col = $cm->get('user_id');
        $this->assertInstanceOf('Soluble\FlexStore\Column\Column', $col);

        $select = new \Zend\Db\Sql\Select();
        $select->from('user');
        $source = new SqlSource($this->adapter, $select);
        $cm = $source->getColumnModel();
        $col = $cm->get('email');
        $this->assertInstanceOf('Soluble\FlexStore\Column\Column', $col);
    }

    public function testHasColumn()
    {
        $select = new \Zend\Db\Sql\Select();
        $select->from('user')->columns(array('user_id', 'password', 'username'));
        $source = new SqlSource($this->adapter, $select);
        $cm = $source->getColumnModel();
        $this->assertTrue($cm->exists('user_id'));
        $this->assertTrue($cm->exists('password'));
        $this->assertFalse($cm->exists('email'));
    }

    public function testGetColumnThrowsColumnNotFoundException()
    {
        $this->setExpectedException('Soluble\FlexStore\Column\Exception\ColumnNotFoundException');
        $select = new \Zend\Db\Sql\Select();
        $select->from('user')->columns(array('user_id', 'password', 'username'));
        
        $source = new SqlSource($this->adapter, $select);
        $cm = $source->getColumnModel();
        $cm->get('this_column_not_exists');
    }

    public function testGetColumnThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\FlexStore\Column\Exception\InvalidArgumentException');
        $select = new \Zend\Db\Sql\Select();
        $select->from('user')->columns(array('user_id', 'password', 'username'));
        $source = new SqlSource($this->adapter, $select);
        $cm = $source->getColumnModel();
        $cm->get(new \stdClass());
    }

    public function testHasColumnThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\FlexStore\Column\Exception\InvalidArgumentException');
        $select = new \Zend\Db\Sql\Select();
        $select->from('user')->columns(array('user_id', 'password', 'username'));
        $source = new SqlSource($this->adapter, $select);
        $cm = $source->getColumnModel();
        $cm->exists(new \stdClass());
    }

    public function testIncludeOnly()
    {
        $select = new \Zend\Db\Sql\Select();
        $select->from('user')->columns(array('user_id', 'email', 'displayName', 'username', 'password'));
        $source = new SqlSource($this->adapter, $select);
        $cm = $source->getColumnModel();

        $include_only = array('email', 'user_id');

        $cm->includeOnly($include_only);
        $this->assertEquals($include_only, array_keys((array) $cm->getColumns()));
    }

    public function testExclusionRetrieval()
    {
        $select = new \Zend\Db\Sql\Select();
        $select->from('user')->columns(array('user_id', 'email', 'displayname', 'username', 'password'));

        $source = new SqlSource($this->adapter, $select);

        $excluded = array('user_id', 'email');
        $cm = $source->getColumnModel();
        $cm->exclude($excluded);
        $this->assertEquals($excluded, $cm->getExcluded());

        $data = $source->getData();
        $this->isInstanceOf('Soluble\FlexStore\ResultSet\ResultSet');

        $d = $data->toArray();
        $first = array_keys($d[0]);

        $this->assertEquals(3, count($first));
        $this->assertEquals('displayname', array_shift($first));
        $this->assertEquals('username', array_shift($first));
    }


}
