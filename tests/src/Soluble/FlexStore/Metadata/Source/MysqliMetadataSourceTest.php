<?php

namespace Soluble\FlexStore\Metadata\Source;

use Soluble\FlexStore\Metadata\Column;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-10 at 10:52:58.
 */
class MysqliMetadataSourceTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var MysqliMetadataSource
	 */
	protected $metadata;
	
	/**
	 *
	 * @var \Zend\Db\Adapter\Adapter
	 */
	protected $adapter;	

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		
		$driver = 'Mysqli';
		$this->adapter = \SolubleTestFactories::getDbAdapter(null, $driver);
		$conn = $this->adapter->getDriver()->getConnection()->getResource();
		$this->metadata = new MysqliMetadataSource($conn);
		
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Soluble\FlexStore\Metadata\Source\MysqliMetadataSource::getColumnsMetadata
	 */
	function testGetColumnsMetadataThrowsEmptyQueryException()
	{
		$this->setExpectedException('Soluble\FlexStore\Metadata\Exception\EmptyQueryException');
		$sql = "";
		$md = $this->metadata->getColumnsMetadata($sql);
	}

	/**
	 * @covers Soluble\FlexStore\Metadata\Source\MysqliMetadataSource::getColumnsMetadata
	 */
	function testGetColumnsMetadataThrowsInvalidQueryException()
	{
		$this->setExpectedException('Soluble\FlexStore\Metadata\Exception\InvalidQueryException');
		$sql = "select * from sss";
		$md = $this->metadata->getColumnsMetadata($sql);
		
	}

	/**
	 * @covers Soluble\FlexStore\Metadata\Source\MysqliMetadataSource::getColumnsMetadata
	 * @covers Soluble\FlexStore\Metadata\ColumnDefinition\AbstractColumn::isPrimary
	 * @covers Soluble\FlexStore\Metadata\ColumnDefinition\AbstractColumn::getDatatype
	 * @covers Soluble\FlexStore\Metadata\ColumnDefinition\AbstractColumn::getNativeDatatype
	 * @covers Soluble\FlexStore\Metadata\ColumnDefinition\AbstractColumn::getTableName
	 * @covers Soluble\FlexStore\Metadata\ColumnDefinition\AbstractColumn::isNullable
	 * @covers Soluble\FlexStore\Metadata\ColumnDefinition\AbstractColumn::getTableAlias
	 * @covers Soluble\FlexStore\Metadata\ColumnDefinition\AbstractColumn::getOrdinalPosition
	 * @covers Soluble\FlexStore\Metadata\ColumnDefinition\AbstractColumn::getCatalog
	 *
	 * @covers Soluble\FlexStore\Metadata\ColumnDefinition\IntegerColumn::isAutoIncrement
 	 * @covers Soluble\FlexStore\Metadata\ColumnDefinition\IntegerColumn::isNumericUnsigned
	 */
	function testgetColumnsMetadata()
	{
		
		$sql = "select * from test_table_types";
		$md = $this->metadata->getColumnsMetadata($sql);
		
		$this->assertEquals($md['id']->isPrimary(), true);
		$this->assertEquals($md['id']->getDatatype(), Column\Type::TYPE_INTEGER);
		$this->assertEquals($md['id']->getTableName(), 'test_table_types');
		$this->assertEquals($md['id']->isNullable(), false);
		$this->assertEquals($md['id']->getTableAlias(), 'test_table_types');
		$this->assertEquals($md['id']->getOrdinalPosition(), 1);
		$this->assertEquals($md['id']->getCatalog(), 'def');
		$this->assertEquals($md['id']->isAutoIncrement(), true);
		
		$this->assertEquals($md['test_varchar_255']->getDatatype(), Column\Type::TYPE_STRING);
		$this->assertEquals($md['test_varchar_255']->getNativeDatatype(), 'VARCHAR');
		$this->assertEquals($md['test_char_10']->getDatatype(), Column\Type::TYPE_STRING);
		$this->assertEquals($md['test_char_10']->getNativeDatatype(), 'VARCHAR');
		// This does not work (bug in mysqli)
		//$this->assertEquals($md['test_char_10']->getCharacterMaximumLength(), 10);
		
		$this->assertEquals($md['test_text_2000']->getDatatype(), Column\Type::TYPE_BLOB);
		$this->assertEquals($md['test_text_2000']->getNativeDatatype(), 'BLOB');		
		
		$this->assertEquals($md['test_binary_3']->getDatatype(), Column\Type::TYPE_STRING);
		$this->assertEquals($md['test_binary_3']->getNativeDatatype(), 'VARCHAR');
		
		$this->assertEquals($md['test_varbinary_10']->getDatatype(), Column\Type::TYPE_STRING);
		$this->assertEquals($md['test_varbinary_10']->getNativeDatatype(), 'VARCHAR');
		
		$this->assertEquals($md['test_int_unsigned']->getDatatype(), Column\Type::TYPE_INTEGER);
		$this->assertTrue($md['test_int_unsigned']->isNumericUnsigned());
		
		$this->assertEquals($md['test_bigint']->getDatatype(), Column\Type::TYPE_INTEGER);
		$this->assertFalse($md['test_bigint']->isNumericUnsigned());
		$this->assertEquals($md['test_bigint']->getNativeDatatype(), 'BIGINT');
		
		$this->assertEquals($md['test_decimal_10_3']->getDatatype(), Column\Type::TYPE_DECIMAL);
		$this->assertEquals($md['test_decimal_10_3']->getNativeDatatype(), 'DECIMAL');
		$this->assertEquals($md['test_decimal_10_3']->getNumericScale(), 3);
		$this->assertEquals($md['test_decimal_10_3']->getNumericPrecision(), 10);
		
		
		$this->assertEquals($md['test_float']->getDatatype(), Column\Type::TYPE_FLOAT);
		$this->assertEquals($md['test_float']->getNativeDatatype(), 'FLOAT');
		
		
		$this->assertEquals($md['test_tinyint']->getDatatype(), Column\Type::TYPE_INTEGER);
		$this->assertEquals($md['test_tinyint']->getNativeDatatype(), 'TINYINT');
		
		$this->assertEquals($md['test_mediumint']->getDatatype(), Column\Type::TYPE_INTEGER);
		$this->assertEquals($md['test_mediumint']->getNativeDatatype(), 'MEDIUMINT');
		
		
		$this->assertEquals($md['test_double']->getDatatype(), Column\Type::TYPE_FLOAT);
		$this->assertEquals($md['test_double']->getNativeDatatype(), 'DOUBLE');
		
		
		$this->assertEquals($md['test_smallint']->getDatatype(), Column\Type::TYPE_INTEGER);
		$this->assertEquals($md['test_smallint']->getNativeDatatype(), 'SMALLINT');
		
		$this->assertEquals($md['test_date']->getDatatype(), Column\Type::TYPE_DATE);
		$this->assertEquals($md['test_date']->getNativeDatatype(), 'DATE');
		
		
		$this->assertEquals($md['test_datetime']->getDatatype(), Column\Type::TYPE_DATETIME);
		$this->assertEquals($md['test_datetime']->getNativeDatatype(), 'DATETIME');
		
		$this->assertEquals($md['test_timestamp']->getDatatype(), Column\Type::TYPE_DATETIME);
		$this->assertEquals($md['test_timestamp']->getNativeDatatype(), 'TIMESTAMP');
		
		
		$this->assertEquals($md['test_time']->getDatatype(), Column\Type::TYPE_TIME);
		$this->assertEquals($md['test_time']->getNativeDatatype(), 'TIME');
		
		$this->assertEquals($md['test_blob']->getDatatype(), Column\Type::TYPE_BLOB);
		$this->assertEquals($md['test_blob']->getNativeDatatype(), 'BLOB');
		
		$this->assertEquals($md['test_tinyblob']->getDatatype(), Column\Type::TYPE_BLOB);
		$this->assertEquals($md['test_tinyblob']->getNativeDatatype(), 'BLOB');
		
		
		$this->assertEquals($md['test_mediumblob']->getDatatype(), Column\Type::TYPE_BLOB);
		$this->assertEquals($md['test_mediumblob']->getNativeDatatype(), 'BLOB');
		
		$this->assertEquals($md['test_longblob']->getDatatype(), Column\Type::TYPE_BLOB);
		$this->assertEquals($md['test_longblob']->getNativeDatatype(), 'BLOB');
		
		$this->assertEquals($md['test_enum']->getDatatype(), Column\Type::TYPE_STRING);
		//$this->assertEquals($md['test_enum']->getNativeDatatype(), 'ENUM');
		$this->assertEquals($md['test_enum']->getNativeDatatype(), 'VARCHAR');
		
		$this->assertEquals($md['test_set']->getDatatype(), Column\Type::TYPE_STRING);
		//$this->assertEquals($md['test_set']->getNativeDatatype(), 'SET');
		$this->assertEquals($md['test_set']->getNativeDatatype(), 'VARCHAR');
		
		
	}

	

}
