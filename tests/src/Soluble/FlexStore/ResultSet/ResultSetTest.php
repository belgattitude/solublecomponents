<?php

namespace Soluble\FlexStore\ResultSet;
use Soluble\FlexStore\FlexStore;
use Zend\Paginator\Paginator;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-10-14 at 18:08:25.
 */
class ResultSetTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ResultSet
     */
    protected $resultset;

    /**
     *
     * @var FlexStore
     */
    protected $store;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->adapter = \SolubleTestFactories::getDbAdapter();
        $select = new \Zend\Db\Sql\Select();
        $select->from('product_brand');
        $parameters = array(
            'adapter' => $this->adapter,
            'select' => $select
        );
        $this->store = new FlexStore('zend\select', $parameters);


        $this->resultset = $this->store->getSource()->getData();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Soluble\FlexStore\ResultSet\AbstractResultSet::toArray
     */
    public function testGetArray()
    {
        $select = new \Zend\Db\Sql\Select();
        $select->from('product_brand');
        $parameters = array(
            'adapter' => $this->adapter,
            'select' => $select
        );
        $store = new FlexStore('zend\select', $parameters);

        $resultset = $this->store->getSource()->getData();
        $arr = $resultset->toArray();
        $this->assertInternalType('array', $arr);
    }


    
    public function testGetSetHydratedColumns()
    {
        $select = new \Zend\Db\Sql\Select();
        $select->from('product_brand');
        $parameters = array(
            'adapter' => $this->adapter,
            'select' => $select
        );
        $store = new FlexStore('zend\select', $parameters);

        $columns = array('legacy_mapping', 'brand_id');
        $resultset = $this->store->getSource()->getData();
        $resultset->setHydratedColumns($columns);
        
        $this->assertEquals($columns, $resultset->getHydratedColumns());
        $arr = $resultset->toArray();
        $this->assertInternalType('array', $arr);

        $first = $arr[0];
        foreach($columns as $column) {
            $this->assertArrayHasKey($column, $first);
        }
        // test number of returned columns
        $test = array_keys($first);
        $this->assertEquals(count($columns), count($test));

        // test order / sort

        $this->assertEquals(array_shift($columns), array_shift($test));
        $this->assertEquals(array_shift($columns), array_shift($test));
    }

    
    public function testUnsetHydratedColumns()
    {
        $select = new \Zend\Db\Sql\Select();
        $select->from('product_brand');
        $parameters = array(
            'adapter' => $this->adapter,
            'select' => $select
        );
        $store = new FlexStore('zend\select', $parameters);

        $columns = array('legacy_mapping', 'brand_id');
        $resultset = $this->store->getSource()->getData();
        $resultset->setHydratedColumns($columns);
        $this->assertEquals($columns, $resultset->getHydratedColumns());
        
        $resultset->unsetHydratedColumns();
        $this->assertNull($resultset->getHydratedColumns());
        
    }
    
    public function testGetSource()
    {
        $select = new \Soluble\Db\Sql\Select($this->adapter);
        $select->from('product_brand')->limit(1);
        $parameters = array(
            'adapter' => $this->adapter,
            'select' => $select
        );
        $store = new FlexStore('zend\select', $parameters);
        $resultset = $store->getSource()->getData();
        $this->assertInstanceOf('Soluble\FlexStore\Source\AbstractSource', $resultset->getSource());
        
        
    }

    public function testGetFieldCount()
    {   
        $select = new \Soluble\Db\Sql\Select($this->adapter);
        $select->from('product_brand')->limit(1)->columns(array('reference'));
        $parameters = array(
            'adapter' => $this->adapter,
            'select' => $select
        );
        $store = new FlexStore('zend\select', $parameters);
        $resultset = $store->getSource()->getData();
        $this->assertEquals(1, $resultset->getFieldCount());
        
        $select = new \Soluble\Db\Sql\Select($this->adapter);
        $select->from('product_brand')->limit(1)->columns(array('reference', 'brand_id'));
        $parameters = array(
            'adapter' => $this->adapter,
            'select' => $select
        );
        $store = new FlexStore('zend\select', $parameters);
        $resultset = $store->getSource()->getData();
        $this->assertEquals(2, $resultset->getFieldCount());

        
        $select = new \Soluble\Db\Sql\Select($this->adapter);
        $select->from('product_brand')->limit(1);
        $parameters = array(
            'adapter' => $this->adapter,
            'select' => $select
        );
        $store = new FlexStore('zend\select', $parameters);
        $resultset = $store->getSource()->getData();
        $this->assertEquals(14, $resultset->getFieldCount());
        
        
    }        
    
    public function testGetTotal()
    {   
        // With limit in the rquery
        $select = new \Soluble\Db\Sql\Select($this->adapter);
        $select->from('product_brand')->limit(10)->columns(array('reference'));
        
        $parameters = array(
            'adapter' => $this->adapter,
            'select' => $select
        );
        
        $store = new FlexStore('zend\select', $parameters);
        //$options = new \Soluble\FlexStore\Options();
        //$options->setLimit(10);
        $resultset = $store->getSource()->getData();
        $total = $resultset->getTotalRows();
        
        $this->assertEquals(10, $total);
        $this->assertEquals(10, count($resultset));
        $this->assertEquals(10, $resultset->count());

        // With no limit
        $select = new \Soluble\Db\Sql\Select($this->adapter);
        $select->from('product_brand')->columns(array('reference'));
        $parameters = array(
            'adapter' => $this->adapter,
            'select' => $select
        );
        $store = new FlexStore('zend\select', $parameters);
        $options = new \Soluble\FlexStore\Options();
        $options->setLimit(10);
        $resultset = $store->getSource()->getData($options);
        $total = $resultset->getTotalRows();
        
        $this->assertEquals(93, $total);
        $this->assertEquals(10, count($resultset));
        
    }    
    
    
    public function testLimitColumnsWithSpaces()
    {
        $select = new \Zend\Db\Sql\Select();
        $select->from('product_brand');
        $parameters = array(
            'adapter' => $this->adapter,
            'select' => $select
        );
        $store = new FlexStore('zend\select', $parameters);

        $columns = array('legacy_mapping ', ' brand_id');
        $resultset = $store->getSource()->getData();
        $resultset->setHydratedColumns($columns);
        $arr = $resultset->toArray();
        $this->assertInternalType('array', $arr);

        $first = $arr[0];
        foreach($columns as $column) {
            $this->assertArrayHasKey(trim($column), $first);
        }
    }    

    public function testLimitColumnsThrowsInvalidArgumentException()
    {
        $select = new \Zend\Db\Sql\Select();
        $select->from('product_brand');
        $parameters = array(
            'adapter' => $this->adapter,
            'select' => $select
        );
        $store = new FlexStore('zend\select', $parameters);
        $this->setExpectedException('Soluble\FlexStore\ResultSet\Exception\InvalidArgumentException');
        // Empty array
        $columns = array();
        $resultset = $store->getSource()->getData();
        $resultset->setHydratedColumns($columns);

    }

    public function testSetHydratedColumnsThrowsDuplicateColumnException()
    {
        $select = new \Zend\Db\Sql\Select();
        $select->from('product_brand');
        $parameters = array(
            'adapter' => $this->adapter,
            'select' => $select
        );
        $store = new FlexStore('zend\select', $parameters);
        $this->setExpectedException('Soluble\FlexStore\ResultSet\Exception\DuplicateColumnException');
        // Empty array
        $columns = array('legacy_mapping', 'brand_id', 'legacy_mapping');
        $resultset = $store->getSource()->getData();
        $resultset->setHydratedColumns($columns);
    }    

    public function testLimitColumnsDoesNotThrowsDuplicateColumnException()
    {
        $select = new \Zend\Db\Sql\Select();
        $select->from('product_brand');
        $parameters = array(
            'adapter' => $this->adapter,
            'select' => $select
        );
        $store = new FlexStore('zend\select', $parameters);
        
        // Empty array
        $columns = array('legacy_mapping', 'brand_id', 'legacy_mapping');
        $resultset = $store->getSource()->getData();
        $resultset->setHydratedColumns($columns, $ignore_duplicate_columns=true);
        $arr = $resultset->toArray();
        $this->assertInternalType('array', $arr);

        $first = $arr[0];
        foreach(array_unique($columns) as $column) {
            $this->assertArrayHasKey(trim($column), $first);
        }
        
    }       
    
    public function testCurrentThrowsUnknownColumnException()
    {
        $select = new \Zend\Db\Sql\Select();
        $select->from('product_brand');
        $parameters = array(
            'adapter' => $this->adapter,
            'select' => $select
        );
        $store = new FlexStore('zend\select', $parameters);
        $this->setExpectedException('Soluble\FlexStore\ResultSet\Exception\UnknownColumnException');
        // Empty array
        $columns = array('legacy_mapping', 'columns_that_soes_not_exists');
        $resultset = $store->getSource()->getData();
        $resultset->setHydratedColumns($columns);
        $row = $resultset->current();

    }    
    
    

    /**
     * @covers Soluble\FlexStore\ResultSet\ResultSet::getPaginator
     */
    public function testGetPaginatorThrowsInvalidUsageException()
    {
        $this->setExpectedException('Soluble\FlexStore\Exception\InvalidUsageException');
        $paginator = $this->resultset->getPaginator();
        $this->assertInstanceOf('Zend\Paginator\Paginator', $paginator);
    }

    /**
     * @covers Soluble\FlexStore\ResultSet\ResultSet::getPaginator
     */
    public function testGetPaginator()
    {
        
        $select = new \Zend\Db\Sql\Select();
        $select->from('product_brand');
        $parameters = array(
            'adapter' => $this->adapter,
            'select' => $select
        );

        $store = new FlexStore('zend\select', $parameters);
        $source = $store->getSource();
        $source->getOptions()->setLimit(10, 0);
        $resultset = $source->getData();
        $paginator = $resultset->getPaginator();
        
        $this->assertInstanceOf('Soluble\FlexStore\Helper\Paginator', $paginator);
        $pages = $paginator->getPages();
        
        $this->assertEquals(10, $pages->itemCountPerPage);
        $this->assertEquals(1, $pages->first);
        $this->assertEquals(1, $pages->current);
    }


}
