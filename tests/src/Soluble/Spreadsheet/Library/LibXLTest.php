<?php

namespace Soluble\Spreadsheet\Library;

use Soluble\Spreadsheet\Library\LibXL;
use ExcelBook;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-09-18 at 14:21:24.
 */
class LibXLTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var LibXL
     */
    protected $libxl;
    
    /**
     *
     * @var array
     */
    protected $dummy_license;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->libxl = new LibXL();
        $this->dummy_license = array('name' => 'dummy_key', 'key' => 'dummy_key');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        LibXL::unsetDefaultLicense();
    }

    
    public function testGetExcelBook()
    {
        if (!extension_loaded('excel')) {
            $this->markTestSkipped(
                "Excel extension not available, skipping getExcelBook"
            );
        } else {
            $valid_license = \SolubleTestFactories::getLibXLLicense();
            
            $libxl = new LibXL($valid_license);
            
            $bookXLS  = $libxl->getExcelBook(LibXL::FILE_FORMAT_XLS);
            $bookXLSX = $libxl->getExcelBook(LibXL::FILE_FORMAT_XLSX);
            $this->assertInstanceOf('ExcelBook', $bookXLSX);
            $this->assertInstanceOf('ExcelBook', $bookXLS);
        }
    }
    


    public function testGetLicense()
    {
        $libxl = new LibXL($this->dummy_license);
        $this->assertEquals($this->dummy_license, $libxl->getLicense());
    }

    public function testSetLicense()
    {
        $libxl = new LibXL();
        $libxl->setLicense($this->dummy_license);
        $this->assertEquals($this->dummy_license, $libxl->getLicense());
    }

    public function testGetExcelBookThrowsInvalidArgumentException()
    {
        if (!extension_loaded('excel')) {
            $this->markTestSkipped(
                "Excel extension not available, skipping getExcelBook"
            );
        } else {
            $this->setExpectedException('Soluble\Spreadsheet\Library\Exception\InvalidArgumentException');
            $valid_license = \SolubleTestFactories::getLibXLLicense();
            $libxl = new LibXL($valid_license);
            $bookXLS  = $libxl->getExcelBook('hello');
        }
    }

    public function testGetExcelBookThrowsInvalidArgumentException2()
    {
        if (!extension_loaded('excel')) {
            $this->markTestSkipped(
                "Excel extension not available, skipping getExcelBook"
            );
        } else {
            $this->setExpectedException('Soluble\Spreadsheet\Library\Exception\InvalidArgumentException');
            $valid_license = \SolubleTestFactories::getLibXLLicense();
            $libxl = new LibXL($valid_license);
            $bookXLS  = $libxl->getExcelBook(array('hello'));
        }
    }
    
    
    public function testConstructThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\Spreadsheet\Library\Exception\InvalidArgumentException');
        $libxl = new LibXL(array("cool"));
    }
    
    public function testSetLicenseThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\Spreadsheet\Library\Exception\InvalidArgumentException');
        $libxl = new LibXL();
        $libxl->setLicense(array("cool"));
    }
    
    public function testGetDefaultLicense()
    {
        $default_license = LibXL::getDefaultLicense();
        $this->assertNull($default_license);
        LibXL::setDefaultLicense($this->dummy_license);
        $this->assertEquals($this->dummy_license, LibXL::getDefaultLicense());
        $libXL = new LibXL();
        $this->assertEquals($this->dummy_license, $libXL->getDefaultLicense());
        $this->assertEquals($this->dummy_license, $libXL->getLicense());
        $new_license = array('name' => 'cool', 'key' => 'hello');
        $libXL2 = new LibXL($new_license);
        
        $this->assertEquals($this->dummy_license, $libXL2->getDefaultLicense());
        $this->assertEquals($new_license, $libXL2->getLicense());
    }


    public function testUnSetDefaultLicense()
    {
        LibXL::setDefaultLicense($this->dummy_license);
        $this->assertEquals($this->dummy_license, LibXL::getDefaultLicense());
        LibXL::unsetDefaultLicense();
        $this->assertNull(LibXL::getDefaultLicense());
    }

    
    public function testSetDefaultLicenseThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\Spreadsheet\Library\Exception\InvalidArgumentException');
        //die('cool');
        LibXL::setDefaultLicense(array('cool'));
    }
}
